#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define DISK_SIZE 1000
#define TIME_UNITS 100

typedef struct file {
    char *name;
    int size;
    int start_block;
    struct file *next;
} file;

typedef struct disk {
    int block[DISK_SIZE];
    file *file_list;
} disk;

void create_file(disk *d, char *name, int size) {
    int start_block = -1;
    for (int i = 0; i < DISK_SIZE; i++) {
        if (d->block[i] == 0) {
            start_block = i;
            break;
        }
    }
    if (start_block == -1 || start_block + size > DISK_SIZE) {
        printf("Not enough space to create file %s\n", name);
        return;
    }
    file *new_file = (file *)malloc(sizeof(file));
    new_file->name = name;
    new_file->size = size;
    new_file->start_block = start_block;
    new_file->next = d->file_list;
    d->file_list = new_file;
    for (int i = start_block; i < start_block + size; i++) {
        d->block[i] = 1;
    }
}

void delete_file(disk *d, char *name) {
    file *prev = NULL;
    file *curr = d->file_list;
    while (curr != NULL && strcmp(curr->name, name) != 0) {
        prev = curr;
        curr = curr->next;
    }
    if (curr == NULL) {
        printf("File %s not found\n", name);
        return;
    }
    for (int i = curr->start_block; i < curr->start_block + curr->size; i++) {
        d->block[i] = 0;
    }
    if (prev == NULL) {
        d->file_list = curr->next;
    } else {
        prev->next = curr->next;
    }
}

void rename_file(disk *d, char *old_name, char *new_name) {
    file *curr = d->file_list;
    while (curr != NULL && strcmp(curr->name, old_name) != 0) {
        curr = curr->next;
    }
    if (curr == NULL) {
        printf("File %s not found\n", old_name);
        return;
    }
    curr->name = new_name;
}

void move_file(disk *d, char *name, int new_start_block) {
    // Find the file
    file *curr = d->file_list;
    while (curr != NULL && strcmp(curr->name, name) != 0) {
        curr = curr->next;
    }
    if (curr == NULL) {
        printf("File %s not found\n", name);
        return;
    }
    for (int i = new_start_block; i < new_start_block + curr->size; i++) {
        if (d->block[i] == 1) {
            printf("Cannot move file %s to block %d\n", name, new_start_block);
            return;
        }
    }
    for (int i = curr->start_block; i < curr->start_block + curr->size; i++) {
        d->block[i] = 0;
    }
    for (int i = new_start_block; i < new_start_block + curr->size; i++) {
        d->block[i] = 1;
    }
    curr->start_block = new_start_block;
}

int main() {
    disk d;
    memset(&d, 0, sizeof(disk));
    for (int t = 0; t < TIME_UNITS; t++) {
        char action[10];
        printf("Enter action (create/delete/rename/move/none): ");
        scanf("%s", action);

        if (strcmp(action, "create") == 0) {
            char name[100];
            int size;
            printf("Enter file name: ");
            scanf("%s", name);
            printf("Enter file size: ");
            scanf("%d", &size);
            create_file(&d, name, size);
        } else if (strcmp(action, "delete") == 0) {
            char name[100];
            printf("Enter file name: ");
            scanf("%s", name);
            delete_file(&d, name);
        } else if (strcmp(action, "rename") == 0) {
            char old_name[100];
            char new_name[100];
            printf("Enter old file name: ");
            scanf("%s", old_name);
            printf("Enter new file name: ");
            scanf("%s", new_name);
            rename_file(&d, old_name, new_name);
        } else if (strcmp(action, "move") == 0) {
            char name[100];
            int new_start_block;
            printf("Enter file name: ");
            scanf("%s", name);
            printf("Enter new start block: ");
            scanf("%d", &new_start_block);
            move_file(&d, name, new_start_block);
        }

        int free_blocks = 0;
        int wasted_blocks = 0;
        for (int i = 0; i < DISK_SIZE; i++) {
            if (d.block[i] == 0) {
                free_blocks++;
                if (i > 0 && d.block[i - 1] == 1) {
                    wasted_blocks++;
                }
            }
        }
        printf("Time unit %d: Average fragmentation = %.2f, Wasted disk blocks = %d\n", t, (double)wasted_blocks / free_blocks, wasted_blocks);
    }

    return 0;
}